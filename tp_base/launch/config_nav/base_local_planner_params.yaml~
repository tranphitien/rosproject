# the base panner is used to generate the velocity commands to move our robot
#the config file will set the maximum and minimum velocities for your robot and also the acceleration is set

TrajectoryPlannerROS:
  #Robot configuration parameters
  max_vel_x: 0.1  # m/s
  min_vel_x: 0.035
  max_vel_theta: 0.39
  min_vel_theta: 0.2
  max_rotational_vel: 0.39      #0.1 rad/sec = 5.7 degrees/sec
  min_in_place_rotational_vel: 0.2
  escape_vel: -0.1
  acc_lim_th: 1.0    # m/s^2
  acc_lim_x: 0.7
  acc_lim_y: 0.7
  
  #the holonomic_robot parameter is true if you are using a holonomic platform
  holonomic_robot: false
  
  #goal tolerance parameters
  yaw_goal_tolerance: 0.1  # 0.1 means 5.7 degrees
  xy_goal_tolerance: 0.1
  #latch_xy_goal_tolerance: true
  gdist_scale: 0.8
  pdist_scale: 0.6
  
  #Trajectories Scoring Parameters
  meter_scoring: true            # If true, distance are expressed in meters; otherwise grid cells
  #path_distance_bias: 0.6        # The weighting for how much the controller should stay close to the path it was given
  #goal_distance_bias: 0.8        # The weighting for how much the controller should attemp to reach its local goal, alse controls speed
  occdist_scale: 0.05            # The weighting for how much the controller should attempt to avoid obstacles
                                 # occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  
  heading_lookahead: 0.325       # How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false
  heading_scoring_timestep: 0.1
  oscillation_reset_dist: 0.05   # How far the robot must travel in meter before oscillation flags are reset
  publish_cost_grid_pc: false
  #dwa: true                    # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout 
                                 # (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive.
                                 # It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout,
                                 # but we recommend trying DWA first.) 
  
  #Forward Simulation Parameters
  sim_time: 1.7                  # The amount of time to forward-simalate trajectories in second
  sim_granularity: 0.025        # The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.025  # The step size, in radians, to take between angular samples on a given trajectory
  vx_samples: 8                 # The number of samples to use when exploring the x velocity space
  vtheta_samples: 20             # The number of samples to use when exploring the theta velocity space
  simple_attractor: false
